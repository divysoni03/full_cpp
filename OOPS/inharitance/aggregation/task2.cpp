// 2. Inventory Management System:
//    Create an inventory management system for a retail store. Each store has multiple departments, and each department has multiple products. Implement classes for Store, Department, and Product. The Store class should aggregate Department objects, and each Department object should aggregate Product objects. Implement functionalities to add new products, display products in a particular department, and calculate total revenue generated by a store.

#include<iostream>
using namespace std;

class Product{
    string name;
    float price;
    int Product_id;
public:
    Product(){
        this->name = "";
        this->price = 0.0;
        this->Product_id = 0;
    }
    Product(string name, int Product_id, float price){
        this->name = name;
        this->Product_id = Product_id;
        this->price = price;
    }
    
    void display() {
        cout << "Name : " << name << ", ";
        cout << "Price : " << price << ", ";
        cout << "Product id : " << Product_id << endl;
    }
};

class Department{
    string name;
    int depart_id;
    int MAX_PRODUCT;
    Product* Products;
    int curr_product;
public :    
    Department(){
        this->depart_id = 0;
        this->MAX_PRODUCT = 1;
        this->name = "";
        this->curr_product = 0;
    }
    Department(string name,int depart_id,int MAX_PRODUCT){
        this->depart_id = depart_id;
        this->MAX_PRODUCT = MAX_PRODUCT;
        this->name = name;
        Products = new Product[MAX_PRODUCT];
        this->curr_product = 0;
    }
    
    ~Department(){
        delete[] Products;
    }

    void addProduct(Product& product){
        if(curr_product > MAX_PRODUCT){
            cout << "\nYou reached Max limit on adding Product !" << endl;
        }
        else{
            Products[curr_product++] = product; 
        }
    }

    void display() {
        cout << "Name: " << name << ", ";
        cout << "Department id : " << depart_id << endl;
    }

    void displayProduct(){
        cout << "\n----------Product----------" << endl;
        for(int i=0;i<curr_product;i++){
            Products[i].display();
        }
    }

};

class Store{
    string name;
    int store_num;
    int MAX_DEPART;
    Department* Departments;
    int curr_depart;
public : 
    Store(){
        this->name = "";
        this->store_num = 0;
        this->MAX_DEPART = 1;
        Departments = new Department[MAX_DEPART];
        this->curr_depart =0;
    }
    Store(string name, int store_num,int MAX_DEPART){
        this->name = name ; 
        this->store_num = store_num ; 
        this->MAX_DEPART = MAX_DEPART ; 
        Departments = new Department[MAX_DEPART];
        this->curr_depart = 0;
    }

    ~Store(){
        delete[] Departments;
    }

    void addDepart(Department& depart){
        if(curr_depart > MAX_DEPART){
            cout << "\nMax department capacity reached !! " << endl;
        }
        else{
            Departments[curr_depart++] = depart; 
        }
    }

    void displayDepart(){
        cout << "\n------------Department------------" << endl;
        for(int i=0;i<curr_depart;i++){
            Departments[i].display();
        }
    }
};

int main(){
    Store bookstore("Bookstore" , 23 , 3); //(nameofstore, store_id, max_department)

    Department d1("Friction",1,2);  //(nameofdepartment, department_id, max product)
    Department d2("education",2,1);

    Product p1("harry potter",1,599.99);
    Product p2("Berserk",2,599.50);
    Product p3("Maths 1",3,250);

    bookstore.addDepart(d1);
    bookstore.addDepart(d2);

    d1.addProduct(p1);
    d1.addProduct(p2);

    d2.addProduct(p3);

    bookstore.displayDepart();
    d1.displayProduct();
    d2.displayProduct();
    return 0;
}